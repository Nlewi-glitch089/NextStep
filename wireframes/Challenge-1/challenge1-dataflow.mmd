%% Challenge 1: User Data Manager - Complete System Overview%%Challenge 1: User Data Manager - Dataflow Diagram

%% This is the main dataflow diagram combining all key components%%System Architecture Overview

mermaid

graph TDgraph TD

    A[User Input] --> B[UserManager Object]    A[User Input] --> B[UserManager Object]

    B --> C{Operation Type}    B --> C{Operation Type}

        

    C -->|Add User| D[addUser Method]    C -->|Add User| D[addUser Method]

    C -->|Update User| E[updateUser Method]    C -->|Update User| E[updateUser Method]

    C -->|Get User| F[getUserById Method]    C -->|Get User| F[getUserById Method]

    C -->|Get All Users| G[getAllUsers Method]    C -->|Get All Users| G[getAllUsers Method]

    C -->|Filter Users| H[getUsersByPreference Method]    C -->|Filter Users| H[getUsersByPreference Method]

        

    D --> I[Validate Input Data]    D --> I[Validate Input Data]

    I --> J[Generate Unique ID]    I --> J[Generate Unique ID]

    J --> K[Apply Default Preferences]    J --> K[Apply Default Preferences]

    K --> L[Store in Users Array]    K --> L[Store in Users Array]

    L --> M[Return New User Object]    L --> M[Return New User Object]

        

    E --> N[Find User by ID]    E --> N[Find User by ID]

    N --> O{User Exists?}    N --> O{User Exists?}

    O -->|Yes| P[Merge Updates with Existing Data]    O -->|Yes| P[Merge Updates with Existing Data]

    O -->|No| Q[Return null]    O -->|No| Q[Return null]

    P --> R[Update Preferences if Provided]    P --> R[Update Preferences if Provided]

    R --> S[Update Users Array]    R --> S[Update Users Array]

    S --> T[Return Updated User]    S --> T[Return Updated User]

        

    F --> U[Search Users Array]    F --> U[Search Users Array]

    U --> V{User Found?}    U --> V{User Found?}

    V -->|Yes| W[Return User Object]    V -->|Yes| W[Return User Object]

    V -->|No| X[Return null]    V -->|No| X[Return null]

        

    G --> Y[Create Copy of Users Array]    G --> Y[Create Copy of Users Array]

    Y --> Z[Return Users Copy]    Y --> Z[Return Users Copy]

        

    H --> AA[Filter Users by Preference Key/Value]    H --> AA[Filter Users by Preference Key/Value]

    AA --> BB[Return Filtered Array]    AA --> BB[Return Filtered Array]

        

    M --> CC[Component Props]    M --> CC[Component Props]

    T --> CC    T --> CC

    W --> CC    W --> CC

    Z --> CC    Z --> CC

    BB --> CC    BB --> CC

        

    CC --> DD[React Components]    CC --> DD[React Components]

    DD --> EE[UserProfile Component]    DD --> EE[UserProfile Component]

    DD --> FF[UserList Component]    DD --> FF[UserList Component]

    DD --> GG[UserManagement Component]    DD --> GG[UserManagement Component]

    

    %% JavaScript Concepts Demonstrated

    II[JavaScript Concepts] --> JJ[Object Destructuring]%%Data Flow Details

    II --> KK[Default Parameters]

    II --> LL[Array Methods]%%Input Data Structure

    II --> MM[Immutable Updates]mermaid

    II --> NN[Const/Let Usage]classDiagram
    class UserInput {
        +string name
        +string email
        +number age
        +object preferences
    }
    
    class Preferences {
        +string theme
        +boolean notifications
    }
    
    UserInput --> Preferences : contains


%%Internal Data Processing
mermaid
sequenceDiagram
    participant UI as User Interface
    participant UM as UserManager
    participant VA as Validator
    participant ST as Storage
    participant RC as React Component
    
    UI->>UM: addUser(userData)
    UM->>VA: validateInput(userData)
    VA-->>UM: validation result
    UM->>ST: generateID()
    ST-->>UM: unique ID
    UM->>ST: storeUser(userObject)
    ST-->>UM: stored user
    UM-->>UI: new user object
    UI->>RC: render user data
    RC-->>UI: updated UI


%%React Integration Flow
mermaid
graph LR
    A[UserManager Methods] --> B[Component State]
    B --> C[Props Destructuring]
    C --> D[JSX Rendering]
    D --> E[Event Handlers]
    E --> F[Callback Functions]
    F --> A
    
    G[User Data] --> H{Destructuring}
    H --> I[name, email, age]
    H --> J[preferences: theme, notifications]
    I --> K[Component Props]
    J --> K


%% Key JavaScript Concepts Demonstrated

1. **Object Destructuring**: Extracting user properties and preferences
2. **Default Parameters**: Providing fallback values for preferences
3. **Array Methods**: Using `find`, `filter`, `map` for user operations
4. **Immutable Updates**: Using spread operator for array modifications
5. **Const/Let Usage**: Proper variable declarations throughout