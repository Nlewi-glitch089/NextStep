%% Challenge 3: Event-Driven Shopping Cart - Complete System Overview# Challenge 3: Event-Driven Shopping Cart - Dataflow Diagram

%% This is the main dataflow diagram showing event system and complex state management

## System Architecture Overview

graph TD

    A[User Actions] --> B[ShoppingCart Class]```mermaid

    B --> C[Event System]graph TD

    B --> D[Cart Operations]    A[User Actions] --> B[ShoppingCart Class]

    B --> E[Calculations]    B --> C[Event System]

        B --> D[Cart Operations]

    C --> C1[addEventListener]    B --> E[Calculations]

    C --> C2[removeEventListener]    

    C --> C3[triggerEvent]    C --> C1[addEventListener]

        C --> C2[removeEventListener]

    D --> D1[addItem]    C --> C3[triggerEvent]

    D --> D2[removeItem]    

    D --> D3[updateQuantity]    D --> D1[addItem]

    D --> D4[clearCart]    D --> D2[removeItem]

    D --> D5[checkout]    D --> D3[updateQuantity]

        D --> D4[clearCart]

    E --> E1[calculateItemSubtotal]    D --> D5[checkout]

    E --> E2[calculateItemDiscount]    

    E --> E3[calculateItemTotal]    E --> E1[calculateItemSubtotal]

    E --> E4[calculateSubtotal]    E --> E2[calculateItemDiscount]

    E --> E5[calculateTotalDiscounts]    E --> E3[calculateItemTotal]

    E --> E6[calculateTotal]    E --> E4[calculateSubtotal]

        E --> E5[calculateTotalDiscounts]

    F[ProductCatalog] --> G[Product Management]    E --> E6[calculateTotal]

    G --> G1[getAllProducts]    

    G --> G2[findProductById]    F[ProductCatalog] --> G[Product Management]

    G --> G3[getProductsByCategory]    G --> G1[getAllProducts]

    G --> G4[getProductsByTag]    G --> G2[findProductById]

    G --> G5[getInStockProducts]    G --> G3[getProductsByCategory]

        G --> G4[getProductsByTag]

    H[Higher-Order Functions] --> H1[createDiscountCalculator]    G --> G5[getInStockProducts]

    H --> H2[createPriceFormatter]    

    H --> H3[createCartValidator]    H[Higher-Order Functions] --> H1[createDiscountCalculator]

        H --> H2[createPriceFormatter]

    D1 --> I[Item Added Event]    H --> H3[createCartValidator]

    D2 --> J[Item Removed Event]    

    D3 --> K[Quantity Changed Event]    D1 --> I[Item Added Event]

    D4 --> L[Cart Cleared Event]    D2 --> J[Item Removed Event]

    D5 --> M[Checkout Event]    D3 --> K[Quantity Changed Event]

        D4 --> L[Cart Cleared Event]

    I --> N[Event Listeners]    D5 --> M[Checkout Event]

    J --> N    

    K --> N    I --> N[Event Listeners]

    L --> N    J --> N

    M --> N    K --> N

        L --> N

    N --> O[React Components]    M --> N

    O --> P[UI Updates]    

        N --> O[React Components]

    %% Advanced JavaScript Concepts    O --> P[UI Updates]

    Q[Advanced JS Concepts] --> R[Event-Driven Architecture]```

    Q --> S[Complex State Management]

    Q --> T[Higher-Order Functions]## Event-Driven Architecture Flow

    Q --> U[Callback Patterns]

    Q --> V[Function Composition]```mermaid

    sequenceDiagram

    %% React Integration Points    participant UI as User Interface

    W[React Integration] --> X[Component State Sync]    participant SC as ShoppingCart

    W --> Y[Event Handler Patterns]    participant ES as Event System

    W --> Z[Props and Callbacks]    participant PC as ProductCatalog

    W --> AA[Performance Optimization]    participant CC as Cart Calculator
    participant RC as React Components
    
    UI->>PC: findProductById(productId)
    PC-->>UI: product object
    UI->>SC: addItem(product, quantity)
    SC->>CC: validateItem(product, quantity)
    CC-->>SC: validation result
    SC->>SC: updateCartItems()
    SC->>ES: triggerEvent('itemAdded', item, cart)
    ES->>RC: notify all listeners
    RC->>UI: update cart display
    UI->>SC: calculateTotal()
    SC->>CC: calculate discounts and totals
    CC-->>SC: final totals
    SC-->>UI: total amounts
    UI->>RC: update totals display
```

## Shopping Cart Operations Flow

```mermaid
flowchart TD
    A[Cart Operation Request] --> B{Operation Type}
    
    B -->|Add Item| C[addItem Flow]
    B -->|Remove Item| D[removeItem Flow]
    B -->|Update Quantity| E[updateQuantity Flow]
    B -->|Clear Cart| F[clearCart Flow]
    B -->|Checkout| G[checkout Flow]
    
    C --> C1[Validate Product In Stock]
    C1 --> C2{Item Already in Cart?}
    C2 -->|Yes| C3[Update Existing Quantity]
    C2 -->|No| C4[Add New Cart Item]
    C3 --> C5[Trigger itemAdded Event]
    C4 --> C5
    
    D --> D1[Find Item in Cart]
    D1 --> D2{Item Found?}
    D2 -->|Yes| D3[Remove from Cart Array]
    D2 -->|No| D4[No Action Needed]
    D3 --> D5[Trigger itemRemoved Event]
    
    E --> E1[Find Item in Cart]
    E1 --> E2{New Quantity > 0?}
    E2 -->|Yes| E3[Update Item Quantity]
    E2 -->|No| E4[Remove Item from Cart]
    E3 --> E5[Trigger quantityChanged Event]
    E4 --> E5
    
    F --> F1[Clear Items Array]
    F1 --> F2[Trigger cartCleared Event]
    
    G --> G1[Calculate Final Total]
    G1 --> G2[Trigger checkout Event]
    G2 --> G3[Clear Cart After Success]
```

## Discount Calculation Pipeline

```mermaid
graph TD
    A[Cart Item] --> B[Product Discount Rules]
    B --> C{Has Percentage Discount?}
    C -->|Yes| D[Check Min Quantity]
    C -->|No| E[No Discount Applied]
    
    D --> F{Meets Min Quantity?}
    F -->|Yes| G[Check Valid Until Date]
    F -->|No| E
    
    G --> H{Still Valid?}
    H -->|Yes| I[Apply Percentage Discount]
    H -->|No| E
    
    I --> J[Calculate Discount Amount]
    J --> K[Return Discount Value]
    E --> L[Return Zero Discount]
    
    K --> M[Final Item Total Calculation]
    L --> M
```

## Product Catalog Data Flow

```mermaid
graph LR
    A[Product Database] --> B[ProductCatalog Class]
    B --> C{Query Type}
    
    C -->|Get All| D[getAllProducts]
    C -->|By ID| E[findProductById]
    C -->|By Category| F[getProductsByCategory]
    C -->|By Tag| G[getProductsByTag]
    C -->|In Stock Only| H[getInStockProducts]
    C -->|Search| I[searchProducts]
    
    D --> J[Array.slice for copy]
    E --> K[Array.find method]
    F --> L[Array.filter by category]
    G --> M[Array.filter with includes]
    H --> N[Array.filter by inStock]
    I --> O[Array.filter with text search]
    
    J --> P[React Product Grid]
    K --> Q[React Product Detail]
    L --> P
    M --> P
    N --> P
    O --> P
```

## React Integration Architecture

```mermaid
classDiagram
    class ShoppingApp {
        +cart: ShoppingCart
        +catalog: ProductCatalog
        +handleAddToCart(): void
        +handleRemoveFromCart(): void
        +handleQuantityChange(): void
        +handleCheckout(): void
    }
    
    class ProductGrid {
        +products: Array
        +onAddToCart: Function
        +selectedCategory: String
    }
    
    class ProductCard {
        +product: Object
        +onAddToCart: Function
        +isInCart: Boolean
    }
    
    class CartSummary {
        +cartItems: Array
        +subtotal: Number
        +discounts: Number
        +total: Number
        +onQuantityChange: Function
        +onRemoveItem: Function
        +onCheckout: Function
    }
    
    class CartItem {
        +item: Object
        +onQuantityChange: Function
        +onRemove: Function
    }
    
    ShoppingApp --> ProductGrid : manages
    ShoppingApp --> CartSummary : manages
    ProductGrid --> ProductCard : renders multiple
    CartSummary --> CartItem : renders multiple
```

## Event System Data Flow

```mermaid
stateDiagram-v2
    [*] --> CartEmpty
    
    CartEmpty --> ItemAdded : addItem()
    ItemAdded --> CartWithItems : event triggered
    
    CartWithItems --> ItemAdded : addItem()
    CartWithItems --> QuantityChanged : updateQuantity()
    CartWithItems --> ItemRemoved : removeItem()
    CartWithItems --> CartCleared : clearCart()
    CartWithItems --> CheckoutInitiated : checkout()
    
    QuantityChanged --> CartWithItems : event triggered
    ItemRemoved --> CartWithItems : event triggered
    ItemRemoved --> CartEmpty : last item removed
    
    CartCleared --> CartEmpty : event triggered
    CheckoutInitiated --> CartEmpty : checkout completed
    
    CartWithItems --> CartWithItems : calculate totals
    CartEmpty --> CartEmpty : calculate totals (zero)
```

## Higher-Order Functions Integration

```mermaid
graph TD
    A[Business Rules] --> B[createDiscountCalculator]
    B --> C[Custom Discount Function]
    C --> D[Applied to Cart Items]
    
    E[Formatting Rules] --> F[createPriceFormatter]
    F --> G[Custom Format Function]
    G --> H[Applied to Price Display]
    
    I[Validation Rules] --> J[createCartValidator]
    J --> K[Custom Validation Function]
    K --> L[Applied to Cart Operations]
    
    M[Cart Operations] --> N[withLogging HOF]
    N --> O[Wrapped Operations with Logging]
    O --> P[Enhanced Debugging and Monitoring]
```

## Complete Transaction Flow

```mermaid
journey
    title Shopping Cart User Journey
    section Browse Products
      View Product Catalog: 5: User
      Filter by Category: 4: User
      Search Products: 4: User
      View Product Details: 5: User
    section Add to Cart
      Select Product: 5: User
      Choose Quantity: 4: User
      Add to Cart: 5: User, System
      View Cart Update: 5: User
    section Manage Cart
      View Cart Contents: 5: User
      Update Quantities: 4: User
      Remove Items: 3: User
      Apply Discounts: 5: System
    section Checkout
      Review Total: 5: User
      Confirm Purchase: 5: User
      Process Payment: 4: System
      Clear Cart: 5: System
```